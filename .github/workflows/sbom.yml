name: Generate and Upload SBOM

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  generate-sbom:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get .NET version information
        id: dotnet-version
        run: |
          DOTNET_VERSION=$(dotnet --version)
          DOTNET_RUNTIME=$(dotnet --list-runtimes | head -1)
          echo "version=$DOTNET_VERSION" >> $GITHUB_OUTPUT
          echo "runtime=$DOTNET_RUNTIME" >> $GITHUB_OUTPUT
          echo ".NET SDK Version: $DOTNET_VERSION"
          echo ".NET Runtime: $DOTNET_RUNTIME"

      - name: Find .csproj files and extract target frameworks
        id: project-version
        run: |
          echo "Scanning for .csproj files..."
          FRAMEWORKS=$(find ./src -name "*.csproj" -type f -exec grep -h '<TargetFramework>' {} \; | grep -oP '(?<=<TargetFramework>)[^<]+' | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "frameworks=$FRAMEWORKS" >> $GITHUB_OUTPUT
          echo "Target Frameworks: $FRAMEWORKS"

      - name: Restore NuGet dependencies
        run: |
          dotnet restore
        continue-on-error: true

      - name: Install CycloneDX tool
        run: dotnet tool install --global CycloneDX

      - name: Generate CycloneDX SBOM
        run: |
          cyclonedx -o . -t json -f sbom.json
        continue-on-error: true

      - name: Create enhanced SBOM with .NET metadata
        id: enhance-sbom
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          # Read the generated SBOM if it exists
          sbom_file = 'sbom.json'
          
          if os.path.exists(sbom_file):
              with open(sbom_file, 'r') as f:
                  sbom = json.load(f)
          else:
              # Create a minimal SBOM structure if generation failed
              sbom = {
                  "bomFormat": "CycloneDX",
                  "specVersion": "1.4",
                  "version": 1,
                  "metadata": {},
                  "components": []
              }
          
          # Add metadata with .NET version information
          if 'metadata' not in sbom:
              sbom['metadata'] = {}
          
          sbom['metadata']['timestamp'] = datetime.utcnow().isoformat() + 'Z'
          sbom['metadata']['tools'] = [
              {
                  "vendor": "CycloneDX",
                  "name": "CycloneDX",
                  "version": "2.0"
              }
          ]
          
          sbom['metadata']['component'] = {
              "type": "application",
              "name": "CSharp_Example",
              "properties": [
                  {
                      "name": "dotnet:sdk-version",
                      "value": "${{ steps.dotnet-version.outputs.version }}"
                  },
                  {
                      "name": "dotnet:runtime",
                      "value": "${{ steps.dotnet-version.outputs.runtime }}"
                  },
                  {
                      "name": "dotnet:target-frameworks",
                      "value": "${{ steps.project-version.outputs.frameworks }}"
                  }
              ]
          }
          
          # Write enhanced SBOM
          with open('sbom-enhanced.json', 'w') as f:
              json.dump(sbom, f, indent=2)
          
          print("Enhanced SBOM created with .NET metadata")
          print(f"Component: {sbom['metadata']['component']}")
          EOF

      - name: Generate SBOM via GitHub Dependency Graph API
        run: |
          # Create a snapshot for the dependency graph
          SNAPSHOT=$(cat << 'EOF'
          {
            "version": 0,
            "job": {
              "correlator": "csharp-sbom-${{ github.run_id }}",
              "id": "${{ github.run_id }}"
            },
            "manifests": {
              "packages.lock.json": {
                "file": {
                  "source_location": "packages.lock.json"
                }
              }
            }
          }
          EOF
          )
          
          echo "$SNAPSHOT" > snapshot.json
          
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dependency-graph/snapshots \
            -d @snapshot.json
        continue-on-error: true

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifact
          path: sbom-enhanced.json
          retention-days: 90
          if-no-files-found: warn

      - name: Create SBOM summary
        run: |
          echo "## ðŸ“¦ SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### .NET Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **SDK Version**: ${{ steps.dotnet-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runtime**: ${{ steps.dotnet-version.outputs.runtime }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Frameworks**: ${{ steps.project-version.outputs.frameworks }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifact Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Format**: CycloneDX JSON" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: sbom-enhanced.json" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention**: 90 days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Download the SBOM artifact from the workflow run Artifacts section**" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with SBOM details
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“¦ SBOM Generated Successfully\n\n### .NET Version Information\n- **SDK Version**: ${{ steps.dotnet-version.outputs.version }}\n- **Runtime**: ${{ steps.dotnet-version.outputs.runtime }}\n- **Target Frameworks**: ${{ steps.project-version.outputs.frameworks }}\n\n### Details\n- **Format**: CycloneDX JSON v1.4\n- **Includes**: All NuGet dependencies and .NET metadata\n- **Artifact**: Available in workflow run artifacts\n\nâœ… SBOM artifact is ready for download!`
            })
        continue-on-error: true

      - name: Display SBOM content
        run: |
          if [ -f sbom-enhanced.json ]; then
            echo "=== SBOM Metadata ==="
            python3 -c "import json; data=json.load(open('sbom-enhanced.json')); print(json.dumps(data.get('metadata', {}), indent=2))"
          fi
